import React, { useState } from 'react';
import { useBinanceScreener, useBinanceFutures } from '../hooks/useBinanceQuery';
import { formatPrice, formatVolume, formatPercent, getPriceChangeColor } from '../utils/cryptoUtils';
import KLineChart from './KLineChart';

export default function DensityPage() {
  // VERSION: mobile-spacing-fix-v27102025
  const [isCompactView, setIsCompactView] = useState(() => {
    const saved = localStorage.getItem('density-compact-view');
    return saved ? JSON.parse(saved) : true;
  });
  const [isSpot, setIsSpot] = useState(() => {
    const saved = localStorage.getItem('density-is-spot');
    return saved ? JSON.parse(saved) : true;
  });
  const [coinIntervals, setCoinIntervals] = useState(() => {
    const saved = localStorage.getItem('density-coin-intervals');
    return saved ? JSON.parse(saved) : {};
  });
  const [showVolume, setShowVolume] = useState(() => {
    const saved = localStorage.getItem('density-show-volume');
    return saved ? JSON.parse(saved) : false;
  });
  const [watchedCoins, setWatchedCoins] = useState({});
  const [colorPopup, setColorPopup] = useState({ show: false, coinId: null });
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [excludedCoins, setExcludedCoins] = useState(() => {
    const saved = localStorage.getItem('density-excluded-coins');
    return saved ? JSON.parse(saved) : [];
  });
  const [coinToExclude, setCoinToExclude] = useState('');
  const [showSavePopup, setShowSavePopup] = useState(false);
  const [presetName, setPresetName] = useState('');
  const [presetToDelete, setPresetToDelete] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [savedPresets, setSavedPresets] = useState(() => {
    const saved = localStorage.getItem('density-presets');
    return saved ? JSON.parse(saved) : [];
  });

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–µ–ª–µ–∫—Ü–∏–∏
  const watchColors = [
    { name: '–ö—Ä–∞—Å–Ω—ã–π', value: '#dc3545', bg: 'bg-danger' },
    { name: '–°–∏–Ω–∏–π', value: '#0d6efd', bg: 'bg-primary' },
    { name: '–ó–µ–ª–µ–Ω—ã–π', value: '#198754', bg: 'bg-success' },
    { name: '–ñ–µ–ª—Ç—ã–π', value: '#ffc107', bg: 'bg-warning' },
    { name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', value: '#6f42c1', bg: 'bg-info' },
    { name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', value: '#fd7e14', bg: 'bg-secondary' }
  ];
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ –º–æ–Ω–µ—Ç—ã
  const setWatchColor = (coinId, color) => {
    setWatchedCoins(prev => ({
      ...prev,
      [coinId]: color
    }));
    setColorPopup({ show: false, coinId: null });
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  const removeWatch = (coinId) => {
    setWatchedCoins(prev => {
      const newWatched = { ...prev };
      delete newWatched[coinId];
      return newWatched;
    });
    setColorPopup({ show: false, coinId: null });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  const addExcludedCoin = () => {
    if (coinToExclude.trim() && !excludedCoins.includes(coinToExclude.trim().toUpperCase())) {
      setExcludedCoins(prev => [...prev, coinToExclude.trim().toUpperCase()]);
      setCoinToExclude('');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  const removeExcludedCoin = (coin) => {
    setExcludedCoins(prev => prev.filter(c => c !== coin));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
  const savePreset = () => {
    if (presetName.trim() && !savedPresets.find(p => p.name === presetName.trim())) {
      const newPreset = {
        name: presetName.trim(),
        settings: {
          isCompactView,
          isSpot,
          showVolume,
          excludedCoins
        }
      };
      const updatedPresets = [...savedPresets, newPreset];
      setSavedPresets(updatedPresets);
      localStorage.setItem('density-presets', JSON.stringify(updatedPresets));
      setPresetName('');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
  const confirmDeletePreset = (preset) => {
    setPresetToDelete(preset);
    setShowDeleteConfirm(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
  const deletePreset = () => {
    if (presetToDelete) {
      const updatedPresets = savedPresets.filter(p => p.name !== presetToDelete.name);
      setSavedPresets(updatedPresets);
      localStorage.setItem('density-presets', JSON.stringify(updatedPresets));
      setPresetToDelete(null);
      setShowDeleteConfirm(false);
    }
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  React.useEffect(() => {
    const handleClickOutside = (event) => {
      if (colorPopup.show && !event.target.closest('.position-relative')) {
        setColorPopup({ show: false, coinId: null });
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [colorPopup.show]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ localStorage
  React.useEffect(() => {
    localStorage.setItem('density-excluded-coins', JSON.stringify(excludedCoins));
  }, [excludedCoins]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
  React.useEffect(() => {
    localStorage.setItem('density-compact-view', JSON.stringify(isCompactView));
  }, [isCompactView]);

  React.useEffect(() => {
    localStorage.setItem('density-is-spot', JSON.stringify(isSpot));
  }, [isSpot]);

  React.useEffect(() => {
    localStorage.setItem('density-coin-intervals', JSON.stringify(coinIntervals));
  }, [coinIntervals]);

  React.useEffect(() => {
    localStorage.setItem('density-show-volume', JSON.stringify(showVolume));
  }, [showVolume]);

  React.useEffect(() => {
    localStorage.setItem('density-presets', JSON.stringify(savedPresets));
  }, [savedPresets]);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
  const timeframes = [
    { value: '1m', label: '1–º' },
    { value: '5m', label: '5–º' },
    { value: '15m', label: '15–º' },
    { value: '30m', label: '30–º' },
    { value: '1h', label: '1—á' },
    { value: '4h', label: '4—á' },
    { value: '1d', label: '1–¥' }
  ];

  const toggleMarketType = (spot) => {
    setIsSpot(spot);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
  const getCoinInterval = (coinId) => {
    return coinIntervals[coinId] || '5m';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
  const setCoinInterval = (coinId, interval) => {
    setCoinIntervals(prev => ({
      ...prev,
      [coinId]: interval
    }));
  };

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const { data: spotCoins, isLoading: spotLoading, error: spotError } = useBinanceScreener(2000);
  const { data: futuresCoins, isLoading: futuresLoading, error: futuresError } = useBinanceFutures(1000);
  
  // –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const allCoins = isSpot ? spotCoins : futuresCoins;
  const loading = isSpot ? spotLoading : futuresLoading;
  const error = isSpot ? spotError : futuresError;

  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
  const densityCoins = React.useMemo(() => {
    if (!allCoins || allCoins.length === 0) return [];
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –ª–µ–≤–µ—Ä–µ–¥–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    const filteredCoins = allCoins.filter(coin => 
      !coin.symbol.includes('UP') && 
      !coin.symbol.includes('DOWN') && 
      !coin.symbol.includes('BULL') && 
      !coin.symbol.includes('BEAR')
    );
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –º–æ–Ω–µ—Ç (–æ–Ω–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –æ–±—ä–µ–º—É)
    return filteredCoins.slice(0, 10);
  }, [allCoins]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('Density Page Debug:', {
    isCompactView,
    loading,
    error,
    allCoinsLength: allCoins?.length || 0,
    densityCoinsLength: densityCoins?.length || 0,
    isSpot
  });

  return (
    <div className="container-fluid p-lg-4 p-0 density-page pb-5">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="d-flex justify-content-between align-items-center mb-lg-4 mb-3 px-lg-4 px-2 px-sm-0">
        <div>
        </div>
        
        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="d-flex gap-2 flex-wrap">
          {/* –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã */}
          {savedPresets.map((preset, index) => (
            <button
              key={index}
              type="button"
              className="btn btn-sm btn-outline-info"
              onClick={() => {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞
                setIsCompactView(preset.settings.isCompactView);
                setIsSpot(preset.settings.isSpot);
                setShowVolume(preset.settings.showVolume);
                setExcludedCoins(preset.settings.excludedCoins);
              }}
              title={`–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç: ${preset.name}`}
            >
              {preset.name}
            </button>
          ))}
          
          {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <button
            type="button"
            className="btn btn-sm btn-outline-primary"
            onClick={() => window.location.reload()}
            title="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"
          >
            üîÑ
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
          <button
            type="button"
            className="btn btn-sm btn-outline-dark"
            onClick={() => setShowSettingsModal(true)}
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"
          >
            ‚öôÔ∏è
          </button>
        </div>
      </div>

      {/* –ë–ª–æ–∫ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ */}
      {loading && (
        <div className="text-center my-5 px-lg-4 px-2">
          <div className="spinner-border" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
          <div className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç...</div>
        </div>
      )}

      {error && (
        <div className="alert alert-warning mx-lg-4 mx-2" role="alert">
          <h4 className="alert-heading">–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API</h4>
          <p>–ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:</p>
          <code>npm run proxy</code>
        </div>
      )}

      {/* –ì—Ä–∞—Ñ–∏–∫–∏ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ */}
      {densityCoins.length > 0 && (
        <div className={`row ${isCompactView ? 'g-lg-3 g-0' : 'g-0 g-md-3'}`}>
          {densityCoins.map((coin, index) => (
            <div key={coin.id} className={isCompactView ? "col-12 col-lg-6" : "col-12"}>
              <div className="card" style={{ border: '1px solid rgba(0, 0, 0, 0.1)', borderRadius: '0.75rem', boxShadow: 'none', outline: 'none', backgroundColor: '#ffffff', margin: '12px 0', overflow: 'hidden' }}>
                <div className="card-body p-0" style={{ border: 'none', boxShadow: 'none', outline: 'none', paddingLeft: '0', paddingRight: '0' }}>
                  {/* –ì—Ä–∞—Ñ–∏–∫ —Å–≤–µ—Ä—Ö—É */}
                  <div className="density-chart-container position-relative" style={{ height: isCompactView ? '350px' : '450px', margin: 0, padding: 0, borderRadius: 0, border: 'none', boxShadow: 'none', outline: 'none' }}>
                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –ø–æ–≤–µ—Ä—Ö –≥—Ä–∞—Ñ–∏–∫–∞ */}
                    <div className="position-absolute" style={{ 
                      top: '10px', 
                      left: '15px', 
                      zIndex: 10,
                      backgroundColor: 'rgba(255, 255, 255, 0.9)',
                      padding: '4px 8px',
                      borderRadius: '4px',
                      fontSize: '1.1rem',
                      fontWeight: 'bold',
                      color: '#0d6efd'
                    }}>
                      {coin.symbol}
                    </div>
                    
                    <KLineChart 
                      symbol={coin.id}
                      interval={getCoinInterval(coin.id)}
                      spot={isSpot}
                      compact={isCompactView}
                      showMidLine={false}
                      showVolume={showVolume}
                    />
                  </div>
                  
                  {/* –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ DOM —Å—Ç–µ–Ω–æ–∫ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º */}
                  <div style={{ border: 'none' }}>
                    <div style={{ paddingTop: '0.5rem', paddingBottom: '0.5rem', paddingLeft: '0', paddingRight: '0', marginLeft: '0', marginRight: '0' }}>
                      


                      {/* –ë–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ DOM —Å—Ç–µ–Ω–∫–µ */}
                      <div className="rounded p-3" style={{ fontSize: '1.3rem', backgroundColor: '#ffffff', border: 'none', borderRadius: '0', boxShadow: 'none', margin: '0' }}>
                        <div className="row g-2">

                          
                          <div className="col-12 mb-2">
                            {/* –û–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ */}
                            <div className="d-none d-md-block">
                              <table className="table table-borderless table-sm mb-0">
                                <tbody>
                                  <tr>
                                    <td style={{ fontSize: '1.2rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-muted">–°—Ç–µ–Ω–∫–∞</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-muted">–Ω–∞ —Ü–µ–Ω–µ:</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-muted">–¥–æ —Ü–µ–Ω—ã:</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-muted">–°—ä–µ–¥–∞–Ω–∏–µ:</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-muted">–≤—Ä–µ–º—è –¥–æ:</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-muted">–∂–∏–∑–Ω—å:</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-muted">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</td>
                                  </tr>
                                  <tr>
                                    <td style={{ fontSize: '1.3rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-dark fw-bold">300—Ç</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-dark fw-bold">2000</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="text-danger fw-bold">+2.5%</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="fw-bold">~12 –º–∏–Ω</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="fw-bold">~45 –º–∏–Ω</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="fw-bold">2.5—á</td>
                                    <td style={{ fontSize: '1.1rem', padding: '4px 8px', verticalAlign: 'middle' }} className="fw-bold">–í—ã—Å–æ–∫–∞—è</td>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                            
                            {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö - –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É, –¥–∞–Ω–Ω—ã–µ —Å–Ω–∏–∑—É */}
                            <div className="d-block d-md-none">
                              <table className="table table-borderless table-sm mb-0" style={{ fontSize: '1.0rem' }}>
                                <thead>
                                  <tr>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal">–°—Ç–µ–Ω–∫–∞</th>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal">–ù–∞ —Ü–µ–Ω–µ</th>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal">–î–æ —Ü–µ–Ω—ã</th>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal">–°—ä–µ–¥–∞–Ω–∏–µ</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  <tr>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="text-dark fw-bold">300—Ç</td>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="text-dark fw-bold">2000</td>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="text-danger fw-bold">+2.5%</td>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="fw-bold">~12 –º–∏–Ω</td>
                                  </tr>
                                </tbody>
                              </table>
                              
                              {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏ - 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
                              <table className="table table-borderless table-sm mb-0 mt-2" style={{ fontSize: '1.0rem' }}>
                                <thead>
                                  <tr>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal">–í—Ä–µ–º—è –¥–æ</th>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal">–ñ–∏–∑–Ω—å</th>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th>
                                    <th style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6', width: '25%' }} className="text-muted fw-normal"></th>
                                  </tr>
                                </thead>
                                <tbody>
                                  <tr>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="fw-bold">~45 –º–∏–Ω</td>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="fw-bold">2.5—á</td>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="fw-bold">–í—ã—Å–æ–∫–∞—è</td>
                                    <td style={{ padding: '4px', textAlign: 'left', verticalAlign: 'middle', border: '1px solid #dee2e6' }} className="fw-bold"></td>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                          </div>
                          
                          <div className="col-lg-12 col-12 mb-2">
                            <div className="progress mb-2 mt-2" style={{ height: '20px', position: 'relative' }}>
                              <div 
                                className="progress-bar bg-danger" 
                                role="progressbar" 
                                style={{ width: '25%' }}
                              >
                                <span className="text-white fw-bold">25%</span>
                              </div>
                              <span className="text-muted fw-bold position-absolute" style={{ right: '8px', top: '50%', transform: 'translateY(-50%)' }}>Vol: 2.4M</span>
                            </div>
                            
                            <div className="progress mb-3 mt-2" style={{ height: '20px', position: 'relative' }}>
                              <div 
                                className="progress-bar bg-success" 
                                role="progressbar" 
                                style={{ width: '72%' }}
                              >
                                <span className="text-white fw-bold">72%</span>
                              </div>
                              <span className="text-muted fw-bold position-absolute" style={{ right: '8px', top: '50%', transform: 'translateY(-50%)' }}>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–±–æ—è</span>
                            </div>
                            
                            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ Bootstrap –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ */}
                            <div className="container-fluid px-0 mt-3 mb-2">
                              <div className="row g-2 align-items-center justify-content-between">
                                <div className="col-12 col-md-auto">
                                  <div className="d-flex flex-wrap gap-1 align-items-center">
                                    {/* –¢–∞–π–º—Ñ—Ä–µ–π–º—ã */}
                                    <div className="btn-group btn-group-sm flex-wrap" role="group">
                                      {timeframes.map((tf) => (
                                        <button
                                          key={tf.value}
                                          type="button"
                                          className={`btn btn-sm ${getCoinInterval(coin.id) === tf.value ? 'btn-primary' : 'btn-outline-primary'}`}
                                          onClick={() => setCoinInterval(coin.id, tf.value)}
                                          style={{ fontSize: '0.75rem', padding: '5px 10px' }}
                                        >
                                          {tf.label}
                                        </button>
                                      ))}
                                    </div>
                                    

                                  </div>
                                </div>
                                
                                <div className="col-12 col-md-auto mt-md-0">
                                  {/* –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–∂–µ–Ω–∏—è */}
                                  <div className="position-relative d-flex justify-content-end justify-content-md-start">
                                    <button 
                                      className="btn btn-outline-info btn-sm d-flex align-items-center gap-1" 
                                      style={{ fontSize: '0.8rem', padding: '6px 14px' }}
                                      onClick={() => setColorPopup({ show: true, coinId: coin.id })}
                                    >
                                      {watchedCoins[coin.id] && (
                                        <span 
                                          className="rounded-circle" 
                                          style={{ 
                                            width: '8px', 
                                            height: '8px', 
                                            backgroundColor: watchedCoins[coin.id].value,
                                            display: 'inline-block'
                                          }}
                                        ></span>
                                      )}
                                      –°–ª–µ–¥–∏—Ç—å
                                    </button>
                                    
                                    {/* –ü–æ–ø–∞–ø –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ */}
                                    {colorPopup.show && colorPopup.coinId === coin.id && (
                                      <div className="position-fixed card shadow-lg border-dark border-2" style={{ 
                                        top: '50%', 
                                        left: '50%', 
                                        transform: 'translate(-50%, -50%)',
                                        zIndex: 99999,
                                        minWidth: '280px',
                                        maxWidth: '90vw'
                                      }}>
                                        <div className="card-body p-3">
                                        <div className="d-flex justify-content-between align-items-center mb-3">
                                          <h6 className="mb-0 text-dark">
                                            <i className="bi bi-palette me-2"></i>
                                            –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç
                                          </h6>
                                          <button 
                                            type="button" 
                                            className="btn-close" 
                                            onClick={() => setColorPopup({ show: false, coinId: null })}
                                            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                                          ></button>
                                        </div>
                                        <div className="d-flex justify-content-between flex-wrap gap-2 mb-3">
                                          {watchColors.map((color, idx) => (
                                            <button
                                              key={idx}
                                              type="button"
                                              className="btn btn-outline-dark border-2 rounded-circle p-0 shadow-sm"
                                              title={color.name}
                                              style={{ 
                                                width: '40px', 
                                                height: '40px', 
                                                backgroundColor: color.value,
                                                borderColor: '#333',
                                                transition: 'all 0.2s ease-in-out'
                                              }}
                                              onClick={() => setWatchColor(coin.id, color)}
                                              onMouseEnter={(e) => {
                                                e.currentTarget.classList.add('shadow');
                                                e.currentTarget.style.transform = 'scale(1.1)';
                                              }}
                                              onMouseLeave={(e) => {
                                                e.currentTarget.classList.remove('shadow');
                                                e.currentTarget.style.transform = 'scale(1)';
                                              }}
                                            ></button>
                                          ))}
                                        </div>
                                        {watchedCoins[coin.id] && (
                                          <div className="mt-3 border-top pt-3">
                                            <button 
                                              className="btn btn-sm btn-outline-danger w-100"
                                              onClick={() => removeWatch(coin.id)}
                                            >
                                              <i className="bi bi-trash me-1"></i>
                                              –£–±—Ä–∞—Ç—å –º–µ—Ç–∫—É
                                            </button>
                                          </div>
                                        )}
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>



                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      {showSettingsModal && (
        <div className="modal show d-block" tabIndex="-1" style={{ backgroundColor: 'rgba(0,0,0,0.5)', overflowX: 'hidden' }}>
          <div className="modal-dialog modal-dialog-scrollable" style={{ maxWidth: '95vw', width: '95vw', margin: '1rem auto', overflowX: 'hidden' }}>
            <div className="modal-content" style={{ overflowX: 'hidden', maxWidth: '100%' }}>
              <div className="modal-header">
                <h5 className="modal-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏</h5>
                <button 
                  type="button" 
                  className="btn-close" 
                  onClick={() => setShowSettingsModal(false)}
                ></button>
              </div>
              <div className="modal-body">
                <div>
                  <div className="row g-3">
                    <div className="col-md-6">
                      <div className="mb-3">
                        <div className="d-flex flex-column flex-md-row gap-2">
                          <input 
                            type="text" 
                            className="form-control flex-grow-1" 
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
                            value={presetName}
                            onChange={(e) => setPresetName(e.target.value)}
                          />
                          <button 
                            className="btn btn-outline-success flex-shrink-0 w-100 w-md-auto" 
                            type="button"
                            onClick={savePreset}
                            style={{ maxWidth: '200px' }}
                          >
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                          </button>
                        </div>
                      </div>

                      {/* –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã */}
                      {savedPresets.length > 0 && (
                        <div className="mb-3">
                          <label className="form-label">–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</label>
                          <div className="d-flex flex-wrap gap-2">
                            {savedPresets.map((preset, index) => (
                              <button
                                key={index}
                                type="button"
                                className="btn btn-sm btn-outline-primary"
                                onClick={() => confirmDeletePreset(preset)}
                                title={`–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${preset.name}`}
                              >
                                {preset.name}
                              </button>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      <h6>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞</h6>
                      <div className="mb-3">
                        <label className="form-label">–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–µ—Ç—ã (–º–ª–Ω USD)</label>
                        <div className="row">
                          <div className="col-6">
                            <label className="form-label small">–û—Ç</label>
                            <input type="number" className="form-control" defaultValue="1" min="0" step="0.1" />
                          </div>
                          <div className="col-6">
                            <label className="form-label small">–î–æ</label>
                            <input type="number" className="form-control" defaultValue="10" min="0" step="0.1" />
                          </div>
                        </div>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (—Å—Ç–µ–Ω–∫–∏)</label>
                        <input type="number" className="form-control" defaultValue="1000" min="1000" step="1000" placeholder="–æ—Ç 1 —Ç—ã—Å" />
                      </div>
                      
                      {/* –¢–∏–ø —Ä—ã–Ω–∫–∞ */}
                      <div className="mb-3">
                        <label className="form-label">–¢–∏–ø —Ä—ã–Ω–∫–∞</label>
                        <div>
                          <button
                            type="button"
                            className={`btn ${isSpot ? 'btn-success' : 'btn-outline-success'} me-2`}
                            onClick={() => setIsSpot(true)}
                          >
                            –°–ø–æ—Ç
                          </button>
                          <button
                            type="button"
                            className={`btn ${!isSpot ? 'btn-warning' : 'btn-outline-warning'}`}
                            onClick={() => setIsSpot(false)}
                          >
                            –§—å—é—á–µ—Ä—Å—ã
                          </button>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-6">
                      <h6>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h6>
                      <div className="form-check mb-3">
                        <input 
                          className="form-check-input" 
                          type="checkbox" 
                          id="showVolume"
                          checked={showVolume} 
                          onChange={(e) => setShowVolume(e.target.checked)}
                        />
                        <label className="form-check-label" htmlFor="showVolume">
                          –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ä–µ–º—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
                        </label>
                      </div>
                      <div className="form-check mb-3">
                        <input 
                          className="form-check-input" 
                          type="checkbox" 
                          id="compactView"
                          checked={isCompactView} 
                          onChange={(e) => setIsCompactView(e.target.checked)}
                        />
                        <label className="form-check-label" htmlFor="compactView">
                          –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥ (2 –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä—è–¥)
                        </label>
                      </div>
                    </div>
                  </div>
                  <div className="row">
                    <div className="col-12">
                      <h6>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h6>
                      <div className="row">
                        <div className="col-sm-6">
                          <div className="mb-3">
                            <label className="form-label">–°–∏–≥–Ω–∞–ª –ø–æ–¥—Ö–æ–¥ –¥–æ —Ü–µ–ª–∏ –∑–∞ (%)</label>
                            <input type="number" className="form-control" defaultValue="5" min="1" max="50" step="0.1" />
                          </div>
                          <div className="mb-3">
                            <label className="form-label">–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç</label>
                            <div className="d-flex flex-column flex-md-row gap-2">
                              <input 
                                type="text" 
                                className="form-control flex-grow-1" 
                                placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ωe—Ç—ã..."
                                list="coinsList"
                                value={coinToExclude}
                                onChange={(e) => setCoinToExclude(e.target.value)}
                              />
                              <button 
                                className="btn btn-outline-primary flex-shrink-0 w-100 w-md-auto" 
                                type="button"
                                onClick={addExcludedCoin}
                                style={{ maxWidth: '200px' }}
                              >
                                –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                              </button>
                            </div>
                            <datalist id="coinsList">
                              <option value="BTC">Bitcoin</option>
                              <option value="ETH">Ethereum</option>
                              <option value="BNB">Binance Coin</option>
                              <option value="ADA">Cardano</option>
                              <option value="SOL">Solana</option>
                              <option value="DOT">Polkadot</option>
                              <option value="MATIC">Polygon</option>
                              <option value="AVAX">Avalanche</option>
                            </datalist>
                            
                            {/* –ë–µ–π–¥–∂–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏ */}
                            {excludedCoins.length > 0 && (
                              <div className="mt-2">
                                {excludedCoins.map((coin, index) => (
                                  <span key={index} className="badge bg-danger me-2 mb-1">
                                    {coin}
                                    <button 
                                      type="button" 
                                      className="btn-close btn-close-white ms-2" 
                                      style={{ fontSize: '0.6em' }}
                                      onClick={() => removeExcludedCoin(coin)}
                                      aria-label="–£–¥–∞–ª–∏—Ç—å"
                                    ></button>
                                  </span>
                                ))}
                              </div>
                            )}
                            
                            <small className="form-text text-muted">–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞</small>
                          </div>
                        </div>
                        <div className="col-sm-6">
                          <div className="mb-3">
                            <label className="form-label">–°–∏–≥–Ω–∞–ª –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ</label>
                            <input type="number" className="form-control" defaultValue="30" min="5" max="300" />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <button 
                  type="button" 
                  className="btn btn-secondary" 
                  onClick={() => setShowSettingsModal(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button 
                  type="button" 
                  className="btn btn-primary"
                  onClick={() => {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
                    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
                    setShowSettingsModal(false);
                    setShowSavePopup(true);
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => setShowSavePopup(false), 3000);
                  }}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ü–æ–ø–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      {showSavePopup && (
        <div className="position-fixed top-50 start-50 translate-middle" style={{ zIndex: 9999 }}>
          <div className="alert alert-success alert-dismissible fade show shadow-lg" role="alert">
            <i className="bi bi-check-circle-fill me-2"></i>
            <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</strong> –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.
            <button 
              type="button" 
              className="btn-close" 
              onClick={() => setShowSavePopup(false)}
              aria-label="Close"
            ></button>
          </div>
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ */}
      {showDeleteConfirm && (
        <div className="modal fade show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <div className="modal-dialog modal-sm">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç</h5>
                <button 
                  type="button" 
                  className="btn-close" 
                  onClick={() => {
                    setShowDeleteConfirm(false);
                    setPresetToDelete(null);
                  }}
                ></button>
              </div>
              <div className="modal-body">
                <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç <strong>"{presetToDelete?.name}"</strong>?</p>
              </div>
              <div className="modal-footer">
                <button 
                  type="button" 
                  className="btn btn-secondary" 
                  onClick={() => {
                    setShowDeleteConfirm(false);
                    setPresetToDelete(null);
                  }}
                >
                  –ù–µ—Ç
                </button>
                <button 
                  type="button" 
                  className="btn btn-danger"
                  onClick={deletePreset}
                >
                  –î–∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

    </div>
  );
}