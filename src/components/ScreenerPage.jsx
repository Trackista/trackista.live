import React from 'react';
import { useBinanceScreener, useBinanceFutures } from '../hooks/useBinanceQuery';
import { formatPrice, formatVolume, formatPercent, getPriceChangeColor } from '../utils/cryptoUtils';
import KLineChart from './KLineChart';

export default function ScreenerPage() {
  const [activeTab, setActiveTab] = React.useState('spot');
  const [isCompactView, setIsCompactView] = React.useState(true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–≤–æ–π–Ω–æ–π —Ä—è–¥ –∞–∫—Ç–∏–≤–µ–Ω
  const [coinIntervals, setCoinIntervals] = React.useState({});
  const [showVolume, setShowVolume] = React.useState(false); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ä–µ–º—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
  const [showVolume2, setShowVolume2] = React.useState(false); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ü–ê–ú–ü –º–æ–Ω–µ—Ç—ã (–¢–û–ü-7 –ø–æ —Ä–æ—Å—Ç—É)
  const [showDump, setShowDump] = React.useState(false); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –î–ê–ú–ü –º–æ–Ω–µ—Ç—ã (–¢–û–ü-7 –ø–æ –ø–∞–¥–µ–Ω–∏—é)

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è —Å–∫—Ä–∏–Ω–µ—Ä–∞
  const timeframes = [
    { value: '1m', label: '1–º' },
    { value: '5m', label: '5–º' },
    { value: '15m', label: '15–º' },
    { value: '30m', label: '30–º' },
    { value: '1h', label: '1—á' },
    { value: '4h', label: '4—á' },
    { value: '1d', label: '1–¥' }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
  const toggleCompactView = () => {
    setIsCompactView(!isCompactView);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
  const getCoinInterval = (coinId) => {
    return coinIntervals[coinId] || '5m';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
  const setCoinInterval = (coinId, interval) => {
    setCoinIntervals(prev => ({
      ...prev,
      [coinId]: interval
    }));
  };

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å TanStack Query
  const { data: spotCoins, isLoading: spotLoading, error: spotError } = useBinanceScreener(2000);
  const { data: futuresCoins, isLoading: futuresLoading, error: futuresError } = useBinanceFutures(1000);
  
  // –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const allCoins = activeTab === 'spot' ? spotCoins : futuresCoins;
  const loading = activeTab === 'spot' ? spotLoading : futuresLoading;
  const error = activeTab === 'spot' ? spotError : futuresError;
  
  // –ë–µ—Ä–µ–º —Ç–æ–ø 10 –º–æ–Ω–µ—Ç –ø–æ –æ–±—ä–µ–º—É
  const topCoins = allCoins ? 
    allCoins
      .filter(coin => coin.id.endsWith('USDT') && coin.quoteVolume > 100000)
      .sort((a, b) => parseFloat(b.quoteVolume) - parseFloat(a.quoteVolume))
      .slice(0, 10) : [];

  // –ë–µ—Ä–µ–º —Ç–æ–ø 7 –º–æ–Ω–µ—Ç –ø–æ —Ä–æ—Å—Ç—É –∑–∞ 24—á (–ü–ê–ú–ü) - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ "–û–±—ä–µ–º2"
  const pampCoins = (showVolume2 && allCoins) ? 
    allCoins
      .filter(coin => coin.id.endsWith('USDT') && parseFloat(coin.changePercent) > 0)
      .sort((a, b) => parseFloat(b.changePercent) - parseFloat(a.changePercent))
      .slice(0, 7) : [];

  // –ë–µ—Ä–µ–º —Ç–æ–ø 7 –º–æ–Ω–µ—Ç –ø–æ –ø–∞–¥–µ–Ω–∏—é –∑–∞ 24—á (–î–ê–ú–ü) - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –î–ê–ú–ü
  const dumpCoins = (showDump && allCoins) ? 
    allCoins
      .filter(coin => coin.id.endsWith('USDT') && parseFloat(coin.changePercent) < 0)
      .sort((a, b) => parseFloat(a.changePercent) - parseFloat(b.changePercent))
      .slice(0, 7) : [];

  if (loading) {
    return (
      <div className="container-fluid">
        <div className="text-center py-5">
          <div className="spinner-border text-primary mb-3" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
          <h5>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø 10 –º–æ–Ω–µ—Ç...</h5>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container-fluid">
        <div className="alert alert-danger m-3">
          <h5>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h5>
          <p>{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container-fluid">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h2>–°–∫—Ä–∏–Ω–µ—Ä –¢–û–ü-10</h2>
          <p className="text-muted mb-0">–ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –º–æ–Ω–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏</p>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="d-flex gap-2">
          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <button
            type="button"
            className="btn btn-outline-info"
            onClick={() => window.open('/', '_blank')}
            title="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
          >
            üìä –ì—Ä–∞—Ñ–∏–∫–∏
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ */}
          <button
            type="button"
            className={`btn ${showVolume ? 'btn-success' : 'btn-outline-success'}`}
            onClick={() => setShowVolume(!showVolume)}
            title={showVolume ? '–°–∫—Ä—ã—Ç—å –æ–±—ä–µ–º—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö' : '–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä–µ–º—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö'}
          >
            üìà –û–±—ä–µ–º
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ –ü–ê–ú–ü (–¢–û–ü-7 –ø–æ —Ä–æ—Å—Ç—É –∑–∞ 24—á) */}
          <button
            type="button"
            className={`btn ${showVolume2 ? 'btn-success' : 'btn-outline-success'}`}
            onClick={() => setShowVolume2(!showVolume2)}
            title={showVolume2 ? '–°–∫—Ä—ã—Ç—å –ü–ê–ú–ü –º–æ–Ω–µ—Ç—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-7 –ü–ê–ú–ü (—Ä–æ—Å—Ç –∑–∞ 24—á)'}
          >
            üöÄ –ü–ê–ú–ü
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ –î–ê–ú–ü (–¢–û–ü-7 –ø–æ –ø–∞–¥–µ–Ω–∏—é –∑–∞ 24—á) */}
          <button
            type="button"
            className={`btn ${showDump ? 'btn-danger' : 'btn-outline-danger'}`}
            onClick={() => setShowDump(!showDump)}
            title={showDump ? '–°–∫—Ä—ã—Ç—å –î–ê–ú–ü –º–æ–Ω–µ—Ç—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-7 –î–ê–ú–ü (–ø–∞–¥–µ–Ω–∏–µ –∑–∞ 24—á)'}
          >
            üìâ –î–ê–ú–ü
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ */}
          <button
            type="button"
            className={`btn ${isCompactView ? 'btn-primary' : 'btn-outline-secondary'}`}
            onClick={toggleCompactView}
            title={isCompactView ? '–û–±—ã—á–Ω—ã–π –≤–∏–¥ (1 –≤ —Ä—è–¥)' : '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥ (2 –≤ —Ä—è–¥)'}
          >
            ‚ïê
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∏ –°–ø–æ—Ç/–§—å—é—á–µ—Ä—Å—ã */}
          <div className="btn-group" role="group">
            <button
              type="button"
              className={`btn ${activeTab === 'spot' ? 'btn-success' : 'btn-outline-success'}`}
              onClick={() => setActiveTab('spot')}
            >
              –°–ø–æ—Ç
            </button>
            <button
              type="button"
              className={`btn ${activeTab === 'futures' ? 'btn-warning' : 'btn-outline-warning'}`}
              onClick={() => setActiveTab('futures')}
            >
              –§—å—é—á–µ—Ä—Å—ã
            </button>
          </div>
        </div>
      </div>

      {/* –¢–û–ü-10 –ø–æ –æ–±—ä–µ–º—É + –¢–û–ü-7 –ü–ê–ú–ü (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ) */}
      <div className="row g-3">
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¢–û–ü-10 –º–æ–Ω–µ—Ç –ø–æ –æ–±—ä–µ–º—É */}
        {topCoins.map((coin, index) => (
          <div key={coin.id} className={isCompactView ? "col-lg-6" : "col-12"}>
            <div className="card" style={{ borderRadius: 0 }}>
              <div className="card-body p-0">
                <div className="row g-0">
                  {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (—Å–Ω–∏–∑—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
                  <div className={isCompactView ? "col-12 col-md-4 border-md-end order-2 order-md-1" : "col-12 col-md-3 border-md-end order-2 order-md-1"}>
                    <div className={isCompactView ? "p-2" : "p-3"}>
                      <div className="d-flex align-items-center mb-2">
                        <h6 className={`mb-0 me-2 ${isCompactView ? 'fs-6' : ''}`}>#{index + 1}</h6>
                        <h5 className={`mb-0 ${isCompactView ? 'fs-6' : 'fs-4'}`}>{coin.symbol}</h5>
                      </div>
                      
                      <div className="mb-2">
                        <div className={`fw-bold ${isCompactView ? 'fs-6' : 'fs-5'}`}>${formatPrice(coin.price)}</div>
                        <div className={`${getPriceChangeColor(coin.changePercent)} fw-bold ${isCompactView ? 'small' : ''}`}>
                          {formatPercent(coin.changePercent)}
                        </div>
                      </div>
                      
                      <div className="small text-muted">
                        <div>–û–±—ä–µ–º: {formatVolume(coin.quoteVolume)}</div>
                        {!isCompactView && <div>–°–¥–µ–ª–∫–∏: {coin.count ? (coin.count > 1000 ? `${Math.round(coin.count/1000)}K` : coin.count.toLocaleString()) : '-'}</div>}
                        <div>–ú–∞–∫—Å: ${formatPrice(coin.high24h)}</div>
                        <div>–ú–∏–Ω: ${formatPrice(coin.low24h)}</div>
                      </div>
                      
                      {/* –ú–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –ª–µ–≤—ã–π –±–ª–æ–∫ */}
                      <div className="mt-3 pt-2 border-top">
                        <small className="text-muted fw-bold d-block mb-2">–¢–∞–π–º—Ñ—Ä–µ–π–º:</small>
                        <div className="btn-group btn-group-sm d-flex flex-wrap" role="group">
                          {timeframes.map((tf) => (
                            <button
                              key={tf.value}
                              type="button"
                              className={`btn btn-sm ${getCoinInterval(coin.id) === tf.value ? 'btn-primary' : 'btn-outline-primary'}`}
                              onClick={() => setCoinInterval(coin.id, tf.value)}
                              style={{ fontSize: '0.6rem', padding: '1px 4px', margin: '1px' }}
                            >
                              {tf.label}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ (—Å–≤–µ—Ä—Ö—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
                  <div className={isCompactView ? "col-12 col-md-8 order-1 order-md-2" : "col-12 col-md-9 order-1 order-md-2"} style={{ padding: 0 }}>
                    <div style={{ height: isCompactView ? '250px' : '320px', margin: 0, padding: 0, borderRadius: 0, border: 'none' }}>
                      <KLineChart 
                        symbol={coin.id}
                        interval={getCoinInterval(coin.id)}
                        spot={activeTab === 'spot'}
                        compact={true}
                        showMidLine={false}
                        showVolume={showVolume}
                        showVolume2={showVolume2}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}

        {/* –ü–ê–ú–ü-–º–æ–Ω–µ—Ç—ã (–¢–û–ü-7 –ø–æ —Ä–æ—Å—Ç—É) - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ "–û–±—ä–µ–º2" */}
        {showVolume2 && pampCoins.map((coin, index) => (
          <div key={`pamp-${coin.id}`} className={isCompactView ? "col-lg-6" : "col-12"}>
            <div className="card border-success" style={{ borderRadius: 0 }}>
              <div className="card-body p-0">
                <div className="row g-0">
                  {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –¥–∞–Ω–Ω—ã–µ –ü–ê–ú–ü –º–æ–Ω–µ—Ç—ã (—Å–Ω–∏–∑—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
                  <div className={isCompactView ? "col-12 col-md-4 border-md-end order-2 order-md-1" : "col-12 col-md-3 border-md-end order-2 order-md-1"}>
                    <div className={isCompactView ? "p-2" : "p-3"}>
                      <div className="d-flex align-items-center mb-2">
                        <span className="badge bg-success me-2">–ü–ê–ú–ü</span>
                        <h5 className={`mb-0 ${isCompactView ? 'fs-6' : 'fs-4'}`}>{coin.symbol}</h5>
                      </div>
                      
                      <div className="mb-2">
                        <div className={`fw-bold ${isCompactView ? 'fs-6' : 'fs-5'}`}>${formatPrice(coin.price)}</div>
                        <div className={`${getPriceChangeColor(coin.changePercent)} fw-bold ${isCompactView ? 'small' : ''}`}>
                          {formatPercent(coin.changePercent)}
                        </div>
                      </div>
                      
                      <div className="small text-muted">
                        <div>–û–±—ä–µ–º: {formatVolume(coin.quoteVolume)}</div>
                        {!isCompactView && <div>–°–¥–µ–ª–∫–∏: {coin.count ? (coin.count > 1000 ? `${Math.round(coin.count/1000)}K` : coin.count.toLocaleString()) : '-'}</div>}
                        <div>–ú–∞–∫—Å: ${formatPrice(coin.high24h)}</div>
                        <div>–ú–∏–Ω: ${formatPrice(coin.low24h)}</div>
                      </div>
                      
                      {/* –ú–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ü–ê–ú–ü –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –ª–µ–≤—ã–π –±–ª–æ–∫ */}
                      <div className="mt-3 pt-2 border-top bg-success bg-opacity-10 rounded">
                        <small className="text-success fw-bold d-block mb-2 px-2">–ü–ê–ú–ü –¢–∞–π–º—Ñ—Ä–µ–π–º:</small>
                        <div className="btn-group btn-group-sm d-flex flex-wrap px-2 pb-2" role="group">
                          {timeframes.map((tf) => (
                            <button
                              key={tf.value}
                              type="button"
                              className={`btn btn-sm ${getCoinInterval(`pamp-${coin.id}`) === tf.value ? 'btn-success' : 'btn-outline-success'}`}
                              onClick={() => setCoinInterval(`pamp-${coin.id}`, tf.value)}
                              style={{ fontSize: '0.6rem', padding: '1px 4px', margin: '1px' }}
                            >
                              {tf.label}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ –ü–ê–ú–ü (—Å–≤–µ—Ä—Ö—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
                  <div className={isCompactView ? "col-12 col-md-8 order-1 order-md-2" : "col-12 col-md-9 order-1 order-md-2"} style={{ padding: 0 }}>
                    <div style={{ height: isCompactView ? '250px' : '320px', margin: 0, padding: 0, borderRadius: 0, border: 'none' }}>
                      <KLineChart 
                        symbol={coin.id}
                        interval={getCoinInterval(`pamp-${coin.id}`)}
                        spot={activeTab === 'spot'}
                        compact={true}
                        showMidLine={false}
                        showVolume={showVolume}
                        showVolume2={showVolume2}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}

        {/* –î–ê–ú–ü-–º–æ–Ω–µ—Ç—ã (–¢–û–ü-7 –ø–æ –ø–∞–¥–µ–Ω–∏—é) - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ "–î–ê–ú–ü" */}
        {showDump && dumpCoins.map((coin, index) => (
          <div key={`dump-${coin.id}`} className={isCompactView ? "col-lg-6" : "col-12"}>
            <div className="card border-danger" style={{ borderRadius: 0 }}>
              <div className="card-body p-0">
                <div className="row g-0">
                  {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –¥–∞–Ω–Ω—ã–µ –î–ê–ú–ü –º–æ–Ω–µ—Ç—ã (—Å–Ω–∏–∑—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
                  <div className={isCompactView ? "col-12 col-md-4 border-md-end order-2 order-md-1" : "col-12 col-md-3 border-md-end order-2 order-md-1"}>
                    <div className={isCompactView ? "p-2" : "p-3"}>
                      <div className="d-flex align-items-center mb-2">
                        <span className="badge bg-danger me-2">–î–ê–ú–ü</span>
                        <h5 className={`mb-0 ${isCompactView ? 'fs-6' : 'fs-4'}`}>{coin.symbol}</h5>
                      </div>
                      
                      <div className="mb-2">
                        <div className={`fw-bold ${isCompactView ? 'fs-6' : 'fs-5'}`}>${formatPrice(coin.price)}</div>
                        <div className={`${getPriceChangeColor(coin.changePercent)} fw-bold ${isCompactView ? 'small' : ''}`}>
                          {formatPercent(coin.changePercent)}
                        </div>
                      </div>
                      
                      <div className="small text-muted">
                        <div>–û–±—ä–µ–º: {formatVolume(coin.quoteVolume)}</div>
                        {!isCompactView && <div>–°–¥–µ–ª–∫–∏: {coin.count ? (coin.count > 1000 ? `${Math.round(coin.count/1000)}K` : coin.count.toLocaleString()) : '-'}</div>}
                        <div>–ú–∞–∫—Å: ${formatPrice(coin.high24h)}</div>
                        <div>–ú–∏–Ω: ${formatPrice(coin.low24h)}</div>
                      </div>
                      
                      {/* –ú–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –î–ê–ú–ü –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –ª–µ–≤—ã–π –±–ª–æ–∫ */}
                      <div className="mt-3 pt-2 border-top bg-danger bg-opacity-10 rounded">
                        <small className="text-danger fw-bold d-block mb-2 px-2">–î–ê–ú–ü –¢–∞–π–º—Ñ—Ä–µ–π–º:</small>
                        <div className="btn-group btn-group-sm d-flex flex-wrap px-2 pb-2" role="group">
                          {timeframes.map((tf) => (
                            <button
                              key={tf.value}
                              type="button"
                              className={`btn btn-sm ${getCoinInterval(`dump-${coin.id}`) === tf.value ? 'btn-danger' : 'btn-outline-danger'}`}
                              onClick={() => setCoinInterval(`dump-${coin.id}`, tf.value)}
                              style={{ fontSize: '0.6rem', padding: '1px 4px', margin: '1px' }}
                            >
                              {tf.label}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ –î–ê–ú–ü (—Å–≤–µ—Ä—Ö—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
                  <div className={isCompactView ? "col-12 col-md-8 order-1 order-md-2" : "col-12 col-md-9 order-1 order-md-2"} style={{ padding: 0 }}>
                    <div style={{ height: isCompactView ? '250px' : '320px', margin: 0, padding: 0, borderRadius: 0, border: 'none' }}>
                      <KLineChart 
                        symbol={coin.id}
                        interval={getCoinInterval(`dump-${coin.id}`)}
                        spot={activeTab === 'spot'}
                        compact={true}
                        showMidLine={false}
                        showVolume={showVolume}
                        showVolume2={showVolume2}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {topCoins.length === 0 && !showVolume2 && !showDump && (
        <div className="text-center py-5">
          <h5 className="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h5>
          <p className="text-muted">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø –º–æ–Ω–µ—Ç—ã</p>
        </div>
      )}

      {showVolume2 && pampCoins.length === 0 && (
        <div className="text-center py-3">
          <div className="alert alert-warning">
            <h6 className="text-warning">‚ö†Ô∏è –ü–ê–ú–ü –º–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h6>
            <p className="mb-0 small">–ù–µ—Ç –º–æ–Ω–µ—Ç —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º –∑–∞ 24—á</p>
          </div>
        </div>
      )}
    </div>
  );
}