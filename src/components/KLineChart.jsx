import React, { useEffect, useRef } from 'react';
import { init, dispose } from 'klinecharts';
import { useBinanceKlines } from '../hooks/useBinanceQuery';

const KLineChart = ({ symbol, interval = '1m', spot = true, compact = false, showMidLine = false, onIntervalChange, fullHeight = false, limit = 500 }) => {
  const chartRef = useRef(null);
  const chart = useRef(null);
  const midLineId = useRef(null); // –•—Ä–∞–Ω–∏–º ID —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
  const timeframes = [
    { value: '1m', label: '1–º' },
    { value: '5m', label: '5–º' },
    { value: '15m', label: '15–º' },
    { value: '30m', label: '30–º' },
    { value: '1h', label: '1—á' },
    { value: '4h', label: '4—á' },
    { value: '1d', label: '1–¥' }
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º TanStack Query –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
  const { data: klinesData, isLoading, error, refetch } = useBinanceKlines(
    symbol || 'BTCUSDT', 
    interval, 
    spot, 
    compact ? (limit || 100) : 500
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É
  const scrollToLastBar = () => {
    if (chart.current && klinesData && klinesData.length > 0) {
      try {
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É
        chart.current.scrollToRealTime();
        console.log('üìç –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É');
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
        try {
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
          chart.current.scrollToDataIndex(klinesData.length - 1);
        } catch (e) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É');
        }
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const handleRefresh = async () => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await refetch();
      // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É
      setTimeout(() => {
        scrollToLastBar();
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
  const addMidLine = (data) => {
    if (!chart.current || !data || data.length === 0) return;
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ª–∏–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (midLineId.current) {
        try {
          chart.current.removeShape(midLineId.current);
        } catch (e) {
          console.log('–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ª–∏–Ω–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞');
        }
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã
      const prices = data.map(item => [item.high, item.low]).flat();
      const maxPrice = Math.max(...prices);
      const minPrice = Math.min(...prices);
      const midPrice = (maxPrice + minPrice) / 2;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
      midLineId.current = chart.current.createShape({
        name: 'horizontalRayLine',
        lock: true,
        styles: {
          line: {
            style: 'dashed',
            dashedValue: [6, 6],
            color: '#ff6b6b',
            size: 2
          }
        },
        dataSource: [{
          type: 'price',
          value: midPrice
        }]
      });
      
      console.log(`üìê –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ $${midPrice.toFixed(2)}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
  useEffect(() => {
    if (chartRef.current && !chart.current) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      const isMobile = window.innerWidth <= 768;
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      const mobileOptions = {
        grid: {
          show: true,
          horizontal: {
            show: true,
            size: 1,
            color: '#f0f0f0',
            style: 'solid'
          },
          vertical: {
            show: true,
            size: 1,
            color: '#f0f0f0',
            style: 'solid'
          }
        },
        candle: {
          margin: {
            top: 0.2,
            bottom: 0.1
          },
          type: 'candle_solid',
          bar: {
            upColor: '#26a69a',
            downColor: '#ef5350',
            noChangeColor: '#888888'
          },
          tooltip: {
            showRule: 'follow_cross',
            showType: 'standard',
            labels: ['Êó∂Èó¥', 'ÂºÄ', 'Êî∂', 'È´ò', '‰Ωé', 'Êàê‰∫§Èáè'],
            values: null,
            defaultValue: 'n/a',
            rect: {
              position: 'fixed',
              paddingLeft: 0,
              paddingRight: 0,
              paddingTop: 0,
              paddingBottom: 6,
              offsetLeft: 8,
              offsetTop: 8,
              offsetRight: 8,
              offsetBottom: 8,
              borderRadius: 4,
              borderSize: 1,
              borderColor: '#3f4254',
              color: '#D9D9D9'
            },
            text: {
              size: 12,
              family: 'Helvetica Neue',
              weight: 'normal',
              color: '#D9D9D9',
              marginLeft: 8,
              marginTop: 6,
              marginRight: 8,
              marginBottom: 0
            }
          }
        },
        technicalIndicator: {
          margin: {
            top: 0.2,
            bottom: 0.1
          },
          bar: {
            upColor: '#26a69a',
            downColor: '#ef5350',
            noChangeColor: '#888888'
          },
          line: {
            size: 1,
            colors: ['#FF9600', '#9D65C9', '#2196F3', '#E11D74', '#01C5C4']
          },
          circle: {
            upColor: '#26a69a',
            downColor: '#ef5350',
            noChangeColor: '#888888'
          }
        },
        xAxis: {
          show: true,
          height: null,
          axisLine: {
            show: true,
            color: '#888888',
            size: 1
          },
          tickText: {
            show: true,
            color: '#D9D9D9',
            family: 'Helvetica Neue',
            weight: 'normal',
            size: isMobile ? 10 : 12, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            paddingTop: 3,
            paddingBottom: 6
          },
          tickLine: {
            show: true,
            size: 1,
            length: 3,
            color: '#888888'
          }
        },
        yAxis: {
          show: true,
          width: isMobile ? 50 : 60, // –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Å–∏ Y –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
          position: 'right',
          type: 'normal',
          inside: false,
          reverse: false,
          axisLine: {
            show: true,
            color: '#888888',
            size: 1
          },
          tickText: {
            show: true,
            color: '#D9D9D9',
            family: 'Helvetica Neue',
            weight: 'normal',
            size: isMobile ? 10 : 12, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            paddingLeft: 3,
            paddingRight: 6
          },
          tickLine: {
            show: true,
            size: 1,
            length: 3,
            color: '#888888'
          }
        }
      };
      
      chart.current = init(chartRef.current, mobileOptions);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –±–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
      if (chart.current) {
        const visibleRange = isMobile ? 
          { from: 0.8, to: 1.0 } : // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 20% –¥–∞–Ω–Ω—ã—Ö (–±–æ–ª—å—à–µ –±–∞—Ä–æ–≤)
          { from: 0.7, to: 1.0 };  // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 30% –¥–∞–Ω–Ω—ã—Ö
        
        setTimeout(() => {
          try {
            chart.current.setVisibleRange(visibleRange);
          } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω');
          }
        }, 100);
      }
      
      console.log(`üìä –ì—Ä–∞—Ñ–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ'} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`);
      
      // –î–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
      if (compact) {
        setTimeout(() => {
          if (chart.current) {
            chart.current.resize();
            console.log('üìê –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
          }
        }, 100);
        
        // ResizeObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const resizeObserver = new ResizeObserver(() => {
          if (chart.current) {
            chart.current.resize();
          }
        });
        
        if (chartRef.current) {
          resizeObserver.observe(chartRef.current);
        }
        
        return () => {
          resizeObserver.disconnect();
        };
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
      const handleResize = () => {
        if (chart.current) {
          const isMobile = window.innerWidth <= 768;
          const visibleRange = isMobile ? 
            { from: 0.8, to: 1.0 } : // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –±–∞—Ä–æ–≤
            { from: 0.7, to: 1.0 };  // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
          
          setTimeout(() => {
            try {
              chart.current.setVisibleRange(visibleRange);
              chart.current.resize();
              console.log(`üì± –ì—Ä–∞—Ñ–∏–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ'} —ç–∫—Ä–∞–Ω–∞`);
            } catch (e) {
              console.log('–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
            }
          }, 100);
        }
      };
      
      window.addEventListener('resize', handleResize);
      
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }

    return () => {
      if (chart.current) {
        dispose(chartRef.current);
        chart.current = null;
        console.log('üóëÔ∏è –ì—Ä–∞—Ñ–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
      }
    };
  }, [compact]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ TanStack Query
  useEffect(() => {
    if (chart.current && klinesData && klinesData.length > 0) {
      chart.current.applyNewData(klinesData);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${klinesData.length} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ TanStack Query`);
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => {
        scrollToLastBar();
      }, 50);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (showMidLine) {
        addMidLine(klinesData);
      }
    }
  }, [klinesData]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ showMidLine
  useEffect(() => {
    if (chart.current && klinesData) {
      if (showMidLine) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
        addMidLine(klinesData);
      } else {
        // –£–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é –ø–æ ID
        if (midLineId.current) {
          try {
            chart.current.removeShape(midLineId.current);
            midLineId.current = null;
            console.log('üóëÔ∏è –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞');
          } catch (error) {
            console.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏:', error);
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –∫–∞–∫ fallback
            try {
              chart.current.removeAllShapes();
              console.log('üóëÔ∏è –í—Å–µ —Ñ–∏–≥—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã');
            } catch (e) {
              console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–≥—É—Ä—ã');
            }
          }
        }
      }
    }
  }, [showMidLine]);

  if (compact) {
    // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫—Ä–∏–Ω–µ—Ä–∞
    return (
      <div style={{ 
        height: '100%', 
        width: '100%',
        padding: '5px',
        overflow: 'hidden',
        position: 'relative'
      }}>
        {isLoading && (
          <div className="d-flex align-items-center justify-content-center h-100">
            <div className="spinner-border spinner-border-sm text-primary" role="status">
              <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
          </div>
        )}
        {error && (
          <div className="d-flex align-items-center justify-content-center h-100 text-danger">
            <small>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</small>
          </div>
        )}
        <div 
          ref={chartRef} 
          style={{ 
            width: '100%', 
            height: '100%',
            maxWidth: '100%',
            maxHeight: '100%',
            backgroundColor: '#fff',
            border: '1px solid #e0e0e0',
            borderRadius: '4px',
            boxSizing: 'border-box',
            overflow: 'hidden'
          }}
        />
      </div>
    );
  }

  // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
  if (fullHeight) {
    return (
      <div className="d-flex flex-column h-100">
        <div className="d-flex justify-content-between align-items-center mb-3 flex-shrink-0">
          <div>
            <h4 className="mb-1">{symbol || 'BTCUSDT'}</h4>
            <small className="text-muted">
              {interval}
              {isLoading && ' ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞...'}
              {error && ' ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'}
            </small>
          </div>
          <div>
            {error && (
              <small className="text-danger me-2">
                –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
              </small>
            )}
          </div>
        </div>

        {/* –ú–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        {onIntervalChange && (
          <div className="mb-3 flex-shrink-0">
            <div className="d-flex align-items-center gap-2 flex-wrap">
              <div className="btn-group btn-group-sm d-flex flex-wrap" role="group" aria-label="–¢–∞–π–º—Ñ—Ä–µ–π–º—ã">
                {timeframes.map((tf) => (
                  <button
                    key={tf.value}
                    type="button"
                    className={`btn btn-sm ${interval === tf.value ? 'btn-primary' : 'btn-outline-primary'}`}
                    style={{ 
                      minWidth: '40px',
                      fontSize: window.innerWidth <= 768 ? '11px' : '12px',
                      padding: window.innerWidth <= 768 ? '4px 6px' : '6px 8px'
                    }}
                    onClick={() => onIntervalChange(tf.value)}
                  >
                    {tf.label}
                  </button>
                ))}
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
              <button
                type="button"
                className="btn btn-outline-secondary btn-sm"
                onClick={handleRefresh}
                disabled={isLoading}
                title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É"
                style={{ 
                  minWidth: '36px',
                  fontSize: window.innerWidth <= 768 ? '14px' : '16px'
                }}
              >
                {isLoading ? (
                  <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                ) : (
                  'üîÑ'
                )}
              </button>
            </div>
          </div>
        )}
        
        <div 
          ref={chartRef} 
          className="flex-grow-1"
          style={{ 
            width: '100%', 
            minHeight: 0,
            backgroundColor: '#fff',
            border: '1px solid #dee2e6',
            borderRadius: '8px'
          }}
        />
        
        <div className="mt-2 flex-shrink-0">
          <small className="text-muted">
            üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
          </small>
        </div>
      </div>
    );
  }

  // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤  
  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <div>
          <h4 className="mb-1">{symbol || 'BTCUSDT'}</h4>
          <small className="text-muted">
            {interval}
            {isLoading && ' ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞...'}
            {error && ' ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'}
          </small>
        </div>
        <div>
          {error && (
            <small className="text-danger me-2">
              –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            </small>
          )}
        </div>
      </div>

      {/* –ú–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      {onIntervalChange && (
        <div className="mb-3">
          <div className="d-flex align-items-center gap-3">
            <div className="btn-group btn-group-sm" role="group" aria-label="–¢–∞–π–º—Ñ—Ä–µ–π–º—ã">
              {timeframes.map((tf) => (
                <button
                  key={tf.value}
                  type="button"
                  className={`btn ${interval === tf.value ? 'btn-primary' : 'btn-outline-primary'}`}
                  onClick={() => onIntervalChange(tf.value)}
                >
                  {tf.label}
                </button>
              ))}
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
            <button
              type="button"
              className="btn btn-outline-secondary btn-sm"
              onClick={handleRefresh}
              disabled={isLoading}
              title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É"
            >
              {isLoading ? (
                <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
              ) : (
                'üîÑ'
              )}
            </button>
          </div>
        </div>
      )}
      
      <div 
        ref={chartRef} 
        style={{ 
          width: '100%', 
          height: '500px',
          backgroundColor: '#fff',
          border: '1px solid #dee2e6',
          borderRadius: '8px'
        }}
      />
      
      <div className="mt-2">
        <small className="text-muted">
          üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        </small>
      </div>
    </div>
  );
};

export default KLineChart;