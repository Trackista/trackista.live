import React, { useEffect, useRef, useState } from 'react';
import { init, dispose } from 'klinecharts';
import { useBinanceKlines } from '../hooks/useBinanceQuery';
import { BreakoutIndicator, BreakoutDisplay } from './BreakoutIndicator';

const KLineChart = ({ symbol, interval = '1m', spot = true, compact = false, showMidLine = false, onIntervalChange, fullHeight = false, limit = 500, showVolume = false, showVolume2 = false }) => {
  const chartRef = useRef(null);
  const chart = useRef(null);
  const midLineId = useRef(null); // –•—Ä–∞–Ω–∏–º ID —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏
  const volumeIndicatorId = useRef(null); // –•—Ä–∞–Ω–∏–º ID –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±—ä–µ–º–∞
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–æ—è
  const [breakoutAnalysis, setBreakoutAnalysis] = useState(null);
  const [showBreakoutResult, setShowBreakoutResult] = useState(false);
  const [indicatorsVisible, setIndicatorsVisible] = useState(false);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
  const timeframes = [
    { value: '1m', label: '1–º' },
    { value: '5m', label: '5–º' },
    { value: '15m', label: '15–º' },
    { value: '30m', label: '30–º' },
    { value: '1h', label: '1—á' },
    { value: '4h', label: '4—á' },
    { value: '1d', label: '1–¥' }
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º TanStack Query –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
  const { data: klinesData, isLoading, error, refetch } = useBinanceKlines(
    symbol || 'BTCUSDT', 
    interval, 
    spot, 
    compact ? (limit || 100) : 1000
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É
  const scrollToLastBar = () => {
    if (chart.current && klinesData && klinesData.length > 0) {
      try {
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É
        chart.current.scrollToRealTime();
        console.log('üìç –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É');
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
        try {
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
          chart.current.scrollToDataIndex(klinesData.length - 1);
        } catch (e) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É');
        }
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º —Ü–µ–Ω—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
  const handlePriceZoomIn = () => {
    if (chart.current) {
      try {
        // –°–±—Ä–æ—Å –∫ –∞–≤—Ç–æ-–º–∞—Å—à—Ç–∞–±—É - —Å–∂–∏–º–∞–µ—Ç —Ü–µ–Ω—É
        chart.current.adjustVisibleRange();
        console.log('üîç –°–∂–∞—Ç–∏–µ –º–∞—Å—à—Ç–∞–±–∞ —Ü–µ–Ω—ã (–∞–≤—Ç–æ-–ø–æ–¥–≥–æ–Ω–∫–∞)');
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –º–∞—Å—à—Ç–∞–± —Ü–µ–Ω—ã:', error);
      }
    }
  };

  const handlePriceZoomOut = () => {
    if (chart.current) {
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è "—Ä–∞–∑–∂–∞—Ç–∏—è" –≤–∏–¥–∞
        chart.current.scrollToRealTime();
        setTimeout(() => {
          chart.current.adjustVisibleRange();
        }, 100);
        console.log('üîç –†–∞–∑–∂–∞—Ç–∏–µ –º–∞—Å—à—Ç–∞–±–∞ —Ü–µ–Ω—ã');
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–∂–∞—Ç—å –º–∞—Å—à—Ç–∞–± —Ü–µ–Ω—ã:', error);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const handleRefresh = async () => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await refetch();
      // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É
      setTimeout(() => {
        scrollToLastBar();
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º –∏ —Å–∂–∞—Ç–∏–µ–º
  const zoomOut = () => {
    if (chart.current && chart.current.zoomAtCoordinate) {
      chart.current.zoomAtCoordinate(0.9); // –û—Ç–¥–∞–ª—è–µ–º
    }
  };

  const zoomIn = () => {
    if (chart.current && chart.current.zoomAtCoordinate) {
      chart.current.zoomAtCoordinate(1.1); // –ü—Ä–∏–±–ª–∏–∂–∞–µ–º
    }
  };

  const moreBars = () => {
    if (chart.current && chart.current.getBarSpace && chart.current.setBarSpace) {
      const currentSpace = chart.current.getBarSpace();
      const newSpace = Math.max(1, currentSpace - 1);
      chart.current.setBarSpace(newSpace);
    }
  };

  const fewerBars = () => {
    if (chart.current && chart.current.getBarSpace && chart.current.setBarSpace) {
      const currentSpace = chart.current.getBarSpace();
      const newSpace = Math.min(20, currentSpace + 1);
      chart.current.setBarSpace(newSpace);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
  const addMidLine = (data) => {
    if (!chart.current || !data || data.length === 0) return;
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ª–∏–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (midLineId.current) {
        try {
          chart.current.removeShape(midLineId.current);
        } catch (e) {
          console.log('–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ª–∏–Ω–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞');
        }
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã
      const prices = data.map(item => [item.high, item.low]).flat();
      const maxPrice = Math.max(...prices);
      const minPrice = Math.min(...prices);
      const midPrice = (maxPrice + minPrice) / 2;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
      midLineId.current = chart.current.createShape({
        name: 'horizontalRayLine',
        lock: true,
        styles: {
          line: {
            style: 'dashed',
            dashedValue: [6, 6],
            color: '#ff6b6b',
            size: 2
          }
        },
        dataSource: [{
          type: 'price',
          value: midPrice
        }]
      });
      
      console.log(`üìê –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ $${midPrice.toFixed(2)}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
  useEffect(() => {
    if (chartRef.current && !chart.current) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      const isMobile = window.innerWidth <= 768;
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–æ–π –∏ —Ä–∞–º–∫–∞–º–∏
      const chartOptions = {
        grid: {
          show: false,
          horizontal: {
            show: false
          },
          vertical: {
            show: false
          }
        },
        candle: {
          margin: {
            top: 0.1,
            bottom: 0.05
          },
          type: 'candle_solid',
          bar: {
            upColor: '#26a69a',
            downColor: '#ef5350',
            noChangeColor: '#888888'
          },
          tooltip: {
            showRule: 'none', // –û—Ç–∫–ª—é—á–∞–µ–º tooltip —Å –¥–∞–Ω–Ω—ã–º–∏ OHLCV
            showType: 'standard',
            labels: ['Êó∂Èó¥', 'ÂºÄ', 'Êî∂', 'È´ò', '‰Ωé', 'Êàê‰∫§Èáè'],
            values: null,
            defaultValue: 'n/a',
            rect: {
              position: 'fixed',
              paddingLeft: 0,
              paddingRight: 0,
              paddingTop: 0,
              paddingBottom: 6,
              offsetLeft: 8,
              offsetTop: 8,
              offsetRight: 8,
              offsetBottom: 8,
              borderRadius: 0,
              borderSize: 0,
              borderColor: 'transparent',
              color: '#D9D9D9'
            },
            text: {
              size: 12,
              family: 'Helvetica Neue',
              weight: 'normal',
              color: '#D9D9D9',
              marginLeft: 8,
              marginTop: 6,
              marginRight: 8,
              marginBottom: 0
            }
          }
        },
        technicalIndicator: {
          margin: {
            top: 0.1,
            bottom: 0.05
          },
          bar: {
            upColor: '#26a69a',
            downColor: '#ef5350',
            noChangeColor: '#888888'
          },
          line: {
            size: 1,
            colors: ['#FF9600', '#9D65C9', '#2196F3', '#E11D74', '#01C5C4']
          },
          circle: {
            upColor: '#26a69a',
            downColor: '#ef5350',
            noChangeColor: '#888888'
          }
        },
        xAxis: {
          show: true,
          height: null,
          axisLine: {
            show: true,
            color: '#888888',
            size: 1
          },
          tickText: {
            show: true,
            color: '#D9D9D9',
            family: 'Helvetica Neue',
            weight: 'normal',
            size: isMobile ? 9 : 11, // –ï—â–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ä–æ–≤
            paddingTop: 2,
            paddingBottom: 4
          },
          tickLine: {
            show: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏–Ω–∏–∏ –Ω–∞ –æ—Å–∏ X
            size: 1,
            length: 3,
            color: '#888888'
          }
        },
        yAxis: {
          show: true,
          width: isMobile ? 50 : 60, // –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Å–∏ Y –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
          position: 'right',
          type: 'normal',
          inside: false,
          reverse: false,
          axisLine: {
            show: true,
            color: '#888888',
            size: 1
          },
          tickText: {
            show: true,
            color: '#D9D9D9',
            family: 'Helvetica Neue',
            weight: 'normal',
            size: isMobile ? 9 : 11, // –ï—â–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ä–æ–≤
            paddingLeft: 2,
            paddingRight: 4
          },
          tickLine: {
            show: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏–Ω–∏–∏ –Ω–∞ –æ—Å–∏ Y
            size: 1,
            length: 3,
            color: '#888888'
          }
        },
        crosshair: {
          show: false, // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏–µ
          horizontal: {
            show: false,
            line: { show: false }
          },
          vertical: {
            show: false,
            line: { show: false }
          }
        }
      };
      
      chart.current = init(chartRef.current, chartOptions);
      
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –±–æ–ª—å—à–µ —Å–≤–µ—á–µ–π –∏ —Å–∂–∞—Ç–∏–µ
      if (chart.current) {
        // 1. –°–∂–∏–º–∞–µ–º –±–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
        chart.current.setBarSpace(4); // –ú–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –±–æ–ª—å—à–µ —Å–≤–µ—á–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        
        // 2. –î–µ–ª–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–æ –æ—Å–∏ —Ü–µ–Ω—ã
        chart.current.setOffsetRightDistance(30); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        chart.current.setMaxOffsetRightDistance(120); // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª
        
        // 3. –í–∫–ª—é—á–∞–µ–º –∑—É–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        chart.current.setZoomEnabled(true); // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∑—É–º (—Å–∂–∏–º–∞—Ç—å/—Ä–∞–∑–∂–∏–º–∞—Ç—å –≤—Ä–µ–º—è)
        
        // 4. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π
        if (chart.current.setRightMinVisibleBarCount) {
          chart.current.setRightMinVisibleBarCount(120);
        }
        
        // 5. –°–ª–µ–≥–∫–∞ –æ—Ç–¥–∞–ª—è–µ–º –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ–±–∑–æ—Ä–∞
        if (chart.current.zoomAtCoordinate) {
          chart.current.zoomAtCoordinate(0.85); // –û—Ç–¥–∞–ª—è–µ–º –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
        }
        
        // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å —Ü–µ–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        chart.current.setStyles({
          yAxis: {
            width: 54, // –ß—É—Ç—å —É–∂–µ –æ—Å—å —Ü–µ–Ω—ã
            tickText: { 
              margin: 2, 
              size: 10 
            }
          }
        });
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–µ—Ç–∫—É, —Ä–∞–º–∫–∏ –∏ tooltip –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (chart.current && chart.current.setStyles) {
        chart.current.setStyles({
          // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–º–∫–∏ —Å–∞–º–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
          separator: {
            size: 0,
            color: 'transparent',
            fill: false,
            activeBackgroundColor: 'transparent'
          },
          grid: {
            show: false,
            horizontal: { show: false },
            vertical: { show: false }
          },
          crosshair: {
            show: false,
            horizontal: { show: false, line: { show: false } },
            vertical: { show: false, line: { show: false } },
            // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–∫–∏ crosshair
            yAxis: {
              label: { 
                size: 10, 
                paddingLeft: 4, 
                paddingRight: 4, 
                borderRadius: 2 
              }
            }
          },
          candle: { 
            tooltip: { showRule: 'none' },
            border: { show: false } // –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫–∏ —Å–≤–µ—á–µ–π
          },
          indicator: { 
            tooltip: { showRule: 'none' }
          },
          // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–º–∫–∏ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
          xAxis: {
            show: true,
            axisLine: { show: false }, // –£–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é –æ—Å–∏ X
            tickLine: { show: false }, // –£–±–∏—Ä–∞–µ–º –∑–∞—Å–µ—á–∫–∏ –æ—Å–∏ X
            splitLine: { show: false } // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –æ—Å–∏ X
          },
          // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –æ—Å—å Y
          yAxis: {
            show: true,
            width: 38, // –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Å–∏ —Å ~52-60 –¥–æ 38
            inside: false, // –û—Å—å —Å–Ω–∞—Ä—É–∂–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            axisLine: { show: false }, // –£–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é –æ—Å–∏ Y
            tickLine: { show: false }, // –£–±–∏—Ä–∞–µ–º –∑–∞—Å–µ—á–∫–∏ –æ—Å–∏ Y
            splitLine: { show: false }, // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –æ—Å–∏ Y
            tickText: {
              size: 10, // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
              marginStart: 0,
              marginEnd: 0,
              // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Ü–µ–Ω - –∫–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é —Å–∫—Ä—ã–≤–∞–µ–º –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º —á–∏—Å–ª–∞
              formatter: (value, index) => {
                if (index % 2) return ''; // –ö–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é –ø–æ–¥–ø–∏—Å—å —Å–∫—Ä—ã–≤–∞–µ–º
                // –°–æ–∫—Ä–∞—â–∞–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
                if (value >= 1e6) return (value/1e6).toFixed(2) + 'M';
                if (value >= 1e3) return (value/1e3).toFixed(1) + 'K';
                return value.toFixed(2);
              }
            }
          },
          // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–µ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
          priceMark: {
            last: {
              show: true,
              label: { 
                size: 10, 
                paddingLeft: 4, 
                paddingRight: 4, 
                borderRadius: 2 
              },
              line: { show: true }
            }
          },
          // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã layout
          layout: {
            padding: { 
              top: 0, 
              right: 0, 
              bottom: 0, 
              left: 0 
            }
          }
        });
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –±–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
      if (chart.current) {
        const visibleRange = isMobile ? 
          { from: 0.35, to: 1.0 } : // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 65% –¥–∞–Ω–Ω—ã—Ö 
          { from: 0.65, to: 1.0 };   // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 35% –¥–∞–Ω–Ω—ã—Ö (–µ—â–µ –º–µ–Ω—å—à–µ –±–∞—Ä–æ–≤, –µ—â–µ –∫—Ä—É–ø–Ω–µ–µ)
        
        setTimeout(() => {
          try {
            if (chart.current && typeof chart.current.setVisibleRange === 'function') {
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞
              const canvasElement = chartRef.current?.querySelector('canvas');
              if (canvasElement && canvasElement.width > 0) {
                chart.current.setVisibleRange(visibleRange);
                console.log('‚úÖ –í–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', visibleRange);
              } else {
                console.log('‚è≥ –ì—Ä–∞—Ñ–∏–∫ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
              }
            } else {
              console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ setVisibleRange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
          } catch (e) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', e.message);
          }
        }, 500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–Ω–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏
      }
      
      console.log(`üìä –ì—Ä–∞—Ñ–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ'} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`);
      
      // –î–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
      if (compact) {
        setTimeout(() => {
          if (chart.current) {
            chart.current.resize();
            console.log('üìê –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
          }
        }, 100);
        
        // ResizeObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const resizeObserver = new ResizeObserver(() => {
          if (chart.current) {
            chart.current.resize();
          }
        });
        
        if (chartRef.current) {
          resizeObserver.observe(chartRef.current);
        }
        
        return () => {
          resizeObserver.disconnect();
        };
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
      const handleResize = () => {
        if (chart.current) {
          const isMobile = window.innerWidth <= 768;
          const visibleRange = isMobile ? 
            { from: 0.35, to: 1.0 } : // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö 65% –¥–∞–Ω–Ω—ã—Ö (+30% –±–∞—Ä–æ–≤)
            { from: 0.22, to: 1.0 };  // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ 78% –¥–∞–Ω–Ω—ã—Ö (+30% –±–∞—Ä–æ–≤)
          
          setTimeout(() => {
            try {
              if (chart.current && typeof chart.current.resize === 'function') {
                chart.current.resize();
              }
              
              if (chart.current && typeof chart.current.setVisibleRange === 'function') {
                const canvasElement = chartRef.current?.querySelector('canvas');
                if (canvasElement && canvasElement.width > 0) {
                  chart.current.setVisibleRange(visibleRange);
                }
              }
              
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
              if (isMobile && chartRef.current) {
                const rect = chartRef.current.getBoundingClientRect();
                if (rect.height < 300) {
                  chartRef.current.style.height = '350px';
                  if (chart.current && typeof chart.current.resize === 'function') {
                    chart.current.resize();
                  }
                }
              }
              
              console.log(`üì± –ì—Ä–∞—Ñ–∏–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ'} —ç–∫—Ä–∞–Ω–∞`);
            } catch (e) {
              console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', e.message);
            }
          }, 100);
        }
      };
      
      window.addEventListener('resize', handleResize);
      
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }

    return () => {
      if (chart.current) {
        dispose(chartRef.current);
        chart.current = null;
        console.log('üóëÔ∏è –ì—Ä–∞—Ñ–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
      }
    };
  }, [compact]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ TanStack Query
  useEffect(() => {
    if (chart.current && klinesData && klinesData.length > 0) {
      chart.current.applyNewData(klinesData);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${klinesData.length} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ TanStack Query`);
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => {
        scrollToLastBar();
        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–∏–π –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫—É –Ω–∞–∑–∞–¥
        setTimeout(() => {
          if (chart.current && chart.current.scrollByDistance) {
            chart.current.scrollByDistance(-35); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–æ 35px –Ω–∞–∑–∞–¥
          }
        }, 100);
      }, 50);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (showMidLine) {
        addMidLine(klinesData);
      }
    }
  }, [klinesData]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ showMidLine
  useEffect(() => {
    if (chart.current && klinesData) {
      if (showMidLine) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
        addMidLine(klinesData);
      } else {
        // –£–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é –ø–æ ID
        if (midLineId.current) {
          try {
            chart.current.removeShape(midLineId.current);
            midLineId.current = null;
            console.log('üóëÔ∏è –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞');
          } catch (error) {
            console.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏:', error);
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –∫–∞–∫ fallback
            try {
              chart.current.removeAllShapes();
              console.log('üóëÔ∏è –í—Å–µ —Ñ–∏–≥—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã');
            } catch (e) {
              console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–≥—É—Ä—ã');
            }
          }
        }
      }
    }
  }, [showMidLine]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–±—ä–µ–º–∞
  useEffect(() => {
    if (chart.current) {
      if (showVolume) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –í–°–ï –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã
        try {
          // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API v9.8.9
          chart.current.removeIndicator();
          
          // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –∏ –ª–∏–Ω–∏–∏
          if (chart.current.removeAllShapes) {
            chart.current.removeAllShapes();
          }
          
          // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–≤–µ—Ä–ª–µ–∏
          if (chart.current.removeOverlay) {
            chart.current.removeOverlay();
          }
          
          // –û—á–∏—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–±–æ—è –µ—Å–ª–∏ –µ—Å—Ç—å
          if (BreakoutIndicator && BreakoutIndicator.clearAllIndicators) {
            BreakoutIndicator.clearAllIndicators(chart.current);
          }
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
          setIndicatorsVisible(false);
          
          console.log('üßπ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—á–∏—â–µ–Ω—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–º–∞');
        } catch (error) {
          console.log('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:', error);
        }
        
        // –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞ –ë–ï–ó –ª–∏–Ω–∏–π MA
        try {
          // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä VOL —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å MA –ª–∏–Ω–∏–∏
          if (chart.current.overrideTechnicalIndicator) {
            chart.current.overrideTechnicalIndicator({
              name: 'VOL',
              shortName: 'VOL',
              calcParams: [], // –ü—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã = –Ω–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
              figures: [
                {
                  key: 'volume',
                  title: 'VOL',
                  type: 'bar',
                  baseValue: 0,
                  styles: (data, indicator, defaultStyles) => {
                    const kLineData = data.kLineData;
                    if (kLineData) {
                      return {
                        color: kLineData.close > kLineData.open ? '#26a69a' : '#ef5350'
                      };
                    }
                    return { color: '#888888' };
                  }
                }
              ]
            });
            console.log('üîß –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä VOL –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –±–µ–∑ MA –ª–∏–Ω–∏–π');
          }
          
          // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –±–µ–∑ MA
          let createdVolumeId;
          
          // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å –ø—É—Å—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è MA
          if (chart.current.createIndicator) {
            createdVolumeId = chart.current.createIndicator('VOL', true, { 
              id: 'volume_pane',
              height: compact ? 60 : 80,
              calcParams: [], // –û—Ç–∫–ª—é—á–∞–µ–º MA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
              styles: {
                ma: [] // –£–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è MA –ª–∏–Ω–∏–π
              }
            });
          } else if (chart.current.createTechnicalIndicator) {
            createdVolumeId = chart.current.createTechnicalIndicator('VOL', true, { 
              id: 'volume_pane',
              height: compact ? 60 : 80,
              calcParams: [], // –û—Ç–∫–ª—é—á–∞–µ–º MA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
              styles: {
                ma: [] // –£–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è MA –ª–∏–Ω–∏–π
              }
            });
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
          volumeIndicatorId.current = createdVolumeId;
          
          console.log('üìà –ß–∏—Å—Ç—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞ –±–µ–∑ MA –ª–∏–Ω–∏–π –≤–∫–ª—é—á–µ–Ω:', createdVolumeId);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±—ä–µ–º–∞:', error);
          console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≥—Ä–∞—Ñ–∏–∫–∞:', Object.getOwnPropertyNames(chart.current));
        }
      } else {
        // –£–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞ –ø—Ä–∏ –≤—Ç–æ—Ä–æ–º –∫–ª–∏–∫–µ
        try {
          // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É ID
          if (volumeIndicatorId.current && chart.current.removeIndicator) {
            chart.current.removeIndicator(volumeIndicatorId.current);
            volumeIndicatorId.current = null;
            console.log('üóëÔ∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞ —É–¥–∞–ª–µ–Ω –ø–æ ID');
          } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —É–¥–∞–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID
            if (chart.current.removeIndicator) {
              chart.current.removeIndicator('volume_pane');
              console.log('üóëÔ∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞ —É–¥–∞–ª–µ–Ω –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID');
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - —É–¥–∞–ª—è–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
          if (chart.current.removeIndicator) {
            chart.current.removeIndicator();
            console.log('üóëÔ∏è –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∫–∞–∫ fallback');
          }
          
        } catch (error) {
          console.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±—ä–µ–º–∞:', error);
        }
      }
    }
  }, [showVolume, compact]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü–ê–ú–ü - —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ ScreenerPage, –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  useEffect(() => {
    // –õ–æ–≥–∏–∫–∞ –ü–ê–ú–ü-–º–æ–Ω–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ScreenerPage, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    if (showVolume2) {
      console.log('ÔøΩ –ü–ê–ú–ü —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞');
    }
  }, [showVolume2]);

  if (compact) {
    // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫—Ä–∏–Ω–µ—Ä–∞
    return (
      <div style={{ 
        height: '100%', 
        width: '100%',
        padding: '5px',
        overflow: 'hidden',
        position: 'relative'
      }}>
        {isLoading && (
          <div className="d-flex align-items-center justify-content-center h-100">
            <div className="spinner-border spinner-border-sm text-primary" role="status">
              <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
          </div>
        )}
        {error && (
          <div className="d-flex align-items-center justify-content-center h-100 text-danger">
            <small>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</small>
          </div>
        )}
        <div 
          ref={chartRef} 
          style={{ 
            width: '100%', 
            height: '100%',
            maxWidth: '100%',
            maxHeight: '100%',
            backgroundColor: '#fff',
            border: 'none',
            borderRadius: '0',
            boxSizing: 'border-box',
            overflow: 'hidden'
          }}
        />
      </div>
    );
  }

  // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
  if (fullHeight) {
    return (
      <div className="d-flex flex-column h-100">
        <div className="d-flex justify-content-between align-items-center mb-3 flex-shrink-0 flex-wrap gap-2">
          <div className="d-flex flex-column">
            <h4 className="mb-1">{symbol || 'BTCUSDT'}</h4>
          </div>

          {/* –ú–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º */}
          {onIntervalChange && (
            <div className="d-flex align-items-center gap-2 flex-wrap">
              <div className="btn-group btn-group-sm d-flex flex-wrap" role="group" aria-label="–¢–∞–π–º—Ñ—Ä–µ–π–º—ã">
                {timeframes.map((tf) => (
                  <button
                    key={tf.value}
                    type="button"
                    className={`btn btn-sm ${interval === tf.value ? 'btn-primary' : 'btn-outline-primary'}`}
                    style={{ 
                      minWidth: '40px',
                      fontSize: window.innerWidth <= 768 ? '11px' : '12px',
                      padding: window.innerWidth <= 768 ? '4px 6px' : '6px 8px'
                    }}
                    onClick={() => onIntervalChange(tf.value)}
                  >
                    {tf.label}
                  </button>
                ))}
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–±–æ–π —Å popover */}
              <div className="position-relative">
                <button
                  type="button"
                  className={`btn btn-sm ${indicatorsVisible ? 'btn-warning' : 'btn-outline-warning'}`}
                  title={indicatorsVisible ? "–£–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–±–æ—è" : "–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω–µ–π"}
                  style={{ 
                    minWidth: '60px',
                    fontSize: window.innerWidth <= 768 ? '11px' : '12px',
                    padding: window.innerWidth <= 768 ? '4px 6px' : '6px 8px'
                  }}
                  onClick={() => {
                  console.log('üéØ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ–±–æ–π, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', indicatorsVisible);
                  
                  if (klinesData && klinesData.length > 0 && chart.current) {
                    // –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–∏–¥–Ω—ã - —É–±–∏—Ä–∞–µ–º –∏—Ö
                    if (indicatorsVisible) {
                      console.log('üßπ –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã');
                      
                      const clearResult = BreakoutIndicator.clearAllIndicators(chart.current);
                      console.log('üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:', clearResult);
                      
                      setIndicatorsVisible(false);
                      setShowBreakoutResult(false);
                      setBreakoutAnalysis(null);
                      
                      return;
                    }
                    
                    // –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –≤–∏–¥–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    console.log('‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã. –î–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã:', {
                      dataLength: klinesData.length,
                      chartExists: !!chart.current,
                      interval: interval
                    });
                    
                    // –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    const linesResult = BreakoutIndicator.drawSupportResistanceLines(chart.current, klinesData, interval);
                    
                    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π:', JSON.stringify(linesResult, null, 2));
                    
                    // –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º Volume Profile –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π
                    const volumeProfileResult = BreakoutIndicator.calculateVolumeProfile(klinesData);
                    console.log('üìà Volume Profile —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', volumeProfileResult);
                    
                    // –†–∏—Å—É–µ–º Volume Profile –ª–∏–Ω–∏–∏ –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω
                    let vpLinesResult = null;
                    if (volumeProfileResult.success) {
                      vpLinesResult = BreakoutIndicator.drawVolumeProfileLines(
                        chart.current, 
                        volumeProfileResult.profile, 
                        klinesData
                      );
                      console.log('üé® Volume Profile –ª–∏–Ω–∏–∏:', vpLinesResult);
                    }
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–æ–π
                    const analysis = BreakoutIndicator.analyzeBreakout(klinesData, {
                      lookbackPeriod: 20,
                      volumeThreshold: 1.5,
                      priceThreshold: 0.002
                    });
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏—è—Ö –∏ Volume Profile –∫ –∞–Ω–∞–ª–∏–∑—É
                    const enhancedAnalysis = {
                      ...analysis,
                      linesDrawn: linesResult.success,
                      linesMessage: linesResult.message,
                      volumeProfile: volumeProfileResult.success ? volumeProfileResult.profile : null,
                      volumeProfileMessage: volumeProfileResult.message,
                      vpLinesDrawn: vpLinesResult?.success || false
                    };
                    
                    setBreakoutAnalysis(enhancedAnalysis);
                    setShowBreakoutResult(true);
                    setIndicatorsVisible(true);
                  } else {
                    console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', {
                      klinesData: !!klinesData,
                      dataLength: klinesData?.length || 0,
                      chart: !!chart.current
                    });
                  }
                }}
              >
                {indicatorsVisible ? '–°–∫—Ä—ã—Ç—å' : '–ü—Ä–æ–±–æ–π'}
              </button>
              
              {/* Popover —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ */}
              {showBreakoutResult && breakoutAnalysis && (
                <BreakoutDisplay 
                  analysis={breakoutAnalysis}
                  onClose={() => setShowBreakoutResult(false)}
                />
              )}
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
              <button
                type="button"
                className="btn btn-outline-secondary btn-sm"
                onClick={handleRefresh}
                disabled={isLoading}
                title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É"
                style={{ 
                  minWidth: '36px',
                  fontSize: window.innerWidth <= 768 ? '14px' : '16px'
                }}
              >
                {isLoading ? (
                  <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                ) : (
                  'üîÑ'
                )}
              </button>
              
              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º —Ü–µ–Ω—ã - —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
              {window.innerWidth <= 768 && (
                <div className="btn-group btn-group-sm" role="group" aria-label="–ú–∞—Å—à—Ç–∞–± —Ü–µ–Ω—ã">
                  <button
                    type="button"
                    className="btn btn-outline-info btn-sm"
                    onClick={handlePriceZoomIn}
                    title="–°–∂–∞—Ç—å –º–∞—Å—à—Ç–∞–± —Ü–µ–Ω—ã (–∞–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞)"
                    style={{ 
                      minWidth: '32px',
                      fontSize: '12px',
                      padding: '4px 6px'
                    }}
                  >
                    ‚¨á
                  </button>
                  <button
                    type="button"
                    className="btn btn-outline-info btn-sm"
                    onClick={handlePriceZoomOut}
                    title="–†–∞–∑–∂–∞—Ç—å –º–∞—Å—à—Ç–∞–± —Ü–µ–Ω—ã"
                    style={{ 
                      minWidth: '32px',
                      fontSize: '12px',
                      padding: '4px 6px'
                    }}
                  >
                    ‚¨Ü
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
        
        <div 
          ref={chartRef} 
          className="flex-grow-1"
          style={{ 
            width: '100%', 
            minHeight: window.innerWidth <= 768 ? '350px' : 0,
            height: window.innerWidth <= 768 ? 'auto' : '100%',
            backgroundColor: '#fff',
            border: 'none',
            borderRadius: '0',
            display: 'block',
            overflow: 'hidden'
          }}
        />
      </div>
    );
  }

  // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤  
  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <div>
          <h4 className="mb-1">{symbol || 'BTCUSDT'}</h4>
          <small className="text-muted">
            {interval}
            {isLoading && ' ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞...'}
            {error && ' ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'}
          </small>
        </div>
        <div>
          {error && (
            <small className="text-danger me-2">
              –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            </small>
          )}
        </div>
      </div>

      {/* –ú–µ–Ω—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      {onIntervalChange && (
        <div className="mb-3">
          <div className="d-flex align-items-center gap-3">
            <div className="btn-group btn-group-sm" role="group" aria-label="–¢–∞–π–º—Ñ—Ä–µ–π–º—ã">
              {timeframes.map((tf) => (
                <button
                  key={tf.value}
                  type="button"
                  className={`btn ${interval === tf.value ? 'btn-primary' : 'btn-outline-primary'}`}
                  onClick={() => onIntervalChange(tf.value)}
                >
                  {tf.label}
                </button>
              ))}
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
            <button
              type="button"
              className="btn btn-outline-secondary btn-sm"
              onClick={handleRefresh}
              disabled={isLoading}
              title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞—Ä—É"
            >
              {isLoading ? (
                <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
              ) : (
                'üîÑ'
              )}
            </button>
          </div>
        </div>
      )}
      
      <div 
        ref={chartRef} 
        className="chart-container"
        style={{ 
          width: '100%', 
          height: '500px',
          backgroundColor: '#fff',
          border: 'none',
          borderRadius: '0',
          margin: 0,
          padding: 0,
          boxShadow: 'none',
          outline: 'none'
        }}
      />
    </div>
  );
};

export default KLineChart;