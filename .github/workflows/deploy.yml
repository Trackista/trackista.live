name: Deploy to Server

on:
  push:
    branches: [ main ]

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build application
      run: npm run build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: eu-central-1
        
    - name: Deploy to S3
      run: |
        # Синхронизируем все файлы
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
        
        # Устанавливаем no-cache для HTML файлов
        aws s3 cp dist/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html --cache-control "no-cache, no-store, must-revalidate"
        
        # Устанавливаем кэширование для статических ресурсов
        aws s3 sync dist/assets/ s3://${{ secrets.S3_BUCKET_NAME }}/assets/ --cache-control "public, max-age=31536000"
        
        # Настраиваем S3 для SPA (Single Page Application)
        aws s3 website s3://${{ secrets.S3_BUCKET_NAME }} --index-document index.html --error-document index.html
        
        # Инвалидируем CloudFront кэш если есть
        if [ ! -z "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        fi